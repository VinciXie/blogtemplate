[{"title":"个人网站的设计思路","author":"VinciXie","content":"### 首页\n参照阮一峰的个人网站首页，不过我是把简历一个链接，博客一个链接\n\n### 博客页面结构\n- 左中右结构，左边是导航，可以隐藏，中间是博客文章列表，右边是一个侧边栏\n- 我的屏幕 1366px 宽，左边导航 150px，右边是 250px; 中间宽度自适应\n\n\n### 后端\n用 express 搭建后端；\n套路如下：\n```javascript\n// 引入 express 并且创建一个 express 实例赋值给 app\nvar express = require('express')\nvar app = express()\n\n// 配置静态文件目录\napp.use(express.static('static'))\n\n// 给 app 注册路由，路由文件都放在 route 目录下，就是后端文件了，其结构如下：\napp.METHOD(path, [callback...], callback)\n// 示例：\napp.get('/', function(req, res) {\n  res.send('hello world');\n});\n\n```\n\n### 项目结构\n- /db\n- /model\n- /node_modules\n- /route\n- /static\n- /template\n- appBlog.js\n\napi 的设计参照\n[RESTful API 设计指南](http://www.ruanyifeng.com/blog/2014/05/restful_api.html)\n，不过博客部分还是先打算做成 spa, 之后不合适再修改。\n点击文章标题发送 ajax，\n\n\n","created_time":1487603929,"id":1,"comments":[]},{"title":"基于 electron 的桌面视频播放器的制作","author":"谢文奇","content":"首先把 html 页面写出来，左边播放区，右边播放列表区，其中左边播放区还有播放控制栏\n\n###### 其中不易实现的需求：\n1. 文件夹内容的访问与播放列表的实现\n2. 鼠标悬停显示文字这个功能的实现\n3. 播放窗口大小的问题，需要根据窗口的大小调节盒子的大小，用js改变css或什么方法\n\n#### 问题的解决\n\n##### 问题 1.文件路径访问的问题\n发现 html5 的 api 并不能提供访问文件完整路径的方法，最后发现\nelectron 提供了文件拖拽访问路径的 API，直接拿来用\n\n拖拽播放，需要调用 node 的 path 模块，将文件路径解析存储，存储方式 localStorage\n\n采用面向对象的编程思路，当文件拖入播放列表区域时，\n1. 将存储文件更新\n---\n获得文件的信息，文件信息需要 3 部分，文件名，文件路径，文件的 id，\n创建一个类，每个MP4文件都是一个实例，将其存入存储，可以进行增删操作。\n\n这个需求卡了我很长时间，不知道怎么进行存取。\n把信息写成对象的形式。\n然后 push 到一个数组里。\n再存储到 localStorage\n\n2. 然后更新播放列表\n---\n文件拖拽可以添加到列表\n\n最后播放列表再理了一次思路之后重新写了一遍，很快就改出来了，非常快\n\n删除列表的单个视频，机制是每次操作后都重新将列表剩余的数据写入 localStorage，然后在把播放列表重新加载，这是最好的方法了，删除中间的元素就是数组操作了\n\n##### 解决 2.显示文字功能 的方法：\n增加一个 span 标签，其 css\n```\n.videoList span {\n  display: none;\n  position: absolute;\n  padding: 5px;\n  background-color: #fff;\n  box-shadow: 3px 3px 7px 1px #000000;\n}\n```\n并给 span 绑定事件\n```\n// 在播放列表的位置，加一个鼠标悬停显示文字的功能\nvar span = e(\".videoList > span\")\n// log(\"span\", span)\n\nbindAll(\"li\", \"mouseover\", function(event) {\nvar target = event.target\nvar target_name = target.textContent\nvar mouseY = event.y\nvar top = mouseY + 20\n// log(\"target_name\", target_name)\n// log(\"mouseX mouseY\", mouseX, mouseY)\nspan.innerHTML = target_name\nspan.style.cssText = `top:${top}px;display:inline;`\n})\n\nbindAll(\"li\", \"mouseout\", function(event) {\nvar target = event.target\nvar target_name = target.textContent\n// log(\"target_name\", target_name)\nspan.innerHTML = \"\"\nspan.style.cssText = `display:none;`\n// span.classList.add(\"none\")\n// log(\"event\", event)\n})\n```\n> 后来发现用 title 属性就可以解决了。。。。。。。。。\n\n#### 解决 3.播放窗口大小控制 的方法\n先检测窗口的大小，根据窗口调整 <vedio> 标签的 css\n\n浏览器窗口大小用 window.innerHeight 和 window.innerWidth 来获取\n\n再利用 onresize 事件，在窗口大小改变的时候触发一个函数\n```\nwindow.addEventListener(\"resize\", changeSize)\n\nvideo {\n  width: 100%;\n  height: 100%;\n  margin: auto;\n  /*border: 1px #eee solid;*/\n}\n```\nvideo 父元素的高度为浏览器窗口的高度，\n这样设置就可以使得video不超出边界\n\n\n#### 增加需求 4，加一点响应式设计\n当窗口缩小的时候，右边的播放列表隐藏起来\n\n### 总结：\n1. 应该先把结构设计好，以便于先搭框架，在填充细节\n2. 应该由状态驱动事件，播放和暂停的状态来触发所需事件，否则，逻辑会变得复杂\n3. 花了不少时间思考如何用js实时控制css，这是个常用套路，应该网上一搜\n4. 数据的存储思考了很长时间，localStorage和JSON现在才用的好一点，还有数据的存储格式，也是参照了萧大的博客模板\n5. 目前没有做到组件化，模块化，这是接下来要加强的方向\n\n\n2月11日晚上，找BUG，，，，\n不知道什么原因，在控制台操作一点问题没有，但是在源码里面操作就一直出错，同样的操作，\n对一个数组进行解包，把最后一个元素和要删除的元素换位置；\n\n于是换了一种方法，反正最后一个是要删掉的，就把最后一个元素的值给要删除的那个元素，但ID保留\n\n但是li标签的内容，dataset和id同步问题，最后分析了一下采用arr的下标的方式的同步，不需要id，操作arr拼接就ok了\n\n#### 需求5：倍速播放功能\n不难，加一个input\n通过值来改变速率，\n很快，但是不好看\n\n\n#### 需求6：停止功能\n通过卸载video的src来实现，一下子搞定，\n然后就是组件化，先把videolist改成面向对象的编程方法\n\n#### 需求7：全屏功能\n调用一个 document.body.webkitRequestFullScreen() ","created_time":1488113418,"id":2},{"title":"爬虫 + 数据可视化","author":"谢文奇","content":"### 爬虫\n简单来说就是用 request 模块请求页面数据，获取页面的 html，然后用 cheerio 模块把需要的内容选出来，这就是爬虫的原理。\n\n使用爬虫，我用到了 3 个模块\n- request\n- cheerio\n- fs\n```\nnpm install request cheerio fs --save\n```\n\n分为以下几个步骤：\n1. 请求页面，request 库是用来请求网页的，就和ajax一样的，在终端相当于代替浏览器的功能\n2. 把页面信息用 fs 模块保存到本地，这样可以不用重复发送请求\n3. 选取节点，cheerio 这个库就可以完成和 dom 一样功能，是服务器上 jquery 核心库的实现\n\n我要爬取的是 AQI(空气质量指数)，数据来自[PM2.5排行榜](http://www.pm25.com/rank.html)\n\n源代码不贴了，然后是数据可视化\n\n### Echarts\nEcharts 是百度出品的一个数据可视化的框架，提供了很多组件，视觉展现力很强，好学好用。\n\n#### 使用\n使用 Echarts 需要 echarts 库，cdn 是很多的。由于我做的是 AQI（空气质量指数） 的分布图，需要中国地图，直接从官网下载引入。\n\n然后就是 AQI 的数据，从 http://www.pm25.com/ 这个网站爬取，只需要城市和 AQI 指数。\n\n再就是城市的坐标，即经纬度，因为城市坐标是不变的，直接找网上现成的数据，就不爬了。\n\n#### 数据能更新\n由于 AQI 数据是动态的，所以数据要先在后端用爬虫爬取后，缓存到服务器，服务器每 12 小时更新一次数据。\n\n再让前端发送 ajax 请求取得数据，然后重新生成页面，所以生成页面的操作就要放在 ajax 的回调里面。","created_time":1488990003,"id":3},{"title":"HTTP 协议的理解","author":"谢文奇","content":"### http协议\n简单来说，就两部分\n- 客户端发起请求，创建端口\n- 服务器在端口监听客户端请求，收到请求，则返回状态和内容\n\n##### 当在浏览器的地址栏输入一个域名地址的时候\n1. Chrome 搜索自身的 DNS 缓存\n2. 搜索操作系统自身的缓存\n3. 读取本地的 HOST 文件\n4. 发起一个 DNS 的调用（向运营商）\n\n##### 运营商进行类似的操作\n1. 查看自身的缓存\n2. 发起一个迭代的 DNS 请求\n- 运营商把结果返回操作系统内核同时缓存\n- 操作系统内核把结果返回浏览器\n- 浏览器得到 IP 地址 \n3. 浏览器获得域名对应的 IP 地址后，发起 三次握手， TCP 连接请求\n4. 然后就可以发送 http 请求了\n\n##### HTTP请求格式\n当浏览器向Web服务器发出请求时，它向服务器传递了一个数据块，也就是请求信息，HTTP请求信息由3部分组成：\n1. 请求方法URI协议/版本\n2. 请求头(Request Header)\n3. 请求正文\n\n下面是一个HTTP请求的例子：\n```\nGET /sample HTTP/1.1\nHost:localhost\nConnection:Keep-Alive\nAccept:image/gif.image/jpeg,*/*\nAccept-Language:zh-cn\nUser-Agent:Mozila/5.0\nAccept-Encoding:gzip,deflate\n \nusername=xiewenqi&password=1234\n```\n\n服务器接收到请求后，就会根据路径参数返回数据，典型回应如下。\n\n```\nHTTP/1.0 200 OK \nContent-Type: text/plain\nContent-Length: 137582\nExpires: Thu, 05 Dec 1997 16:00:00 GMT\nLast-Modified: Wed, 5 August 1996 15:55:28 GMT\nServer: Apache 0.84\n\n<html>\n  <body>Hello World</body>\n</html>\n```\n回应的格式是\"头信息 + 一个空行（\\r\\n） + 数据\"。其中，第一行是\"协议版本 + 状态码（status code） + 状态描述\"。\n\n浏览器拿到html代码后，进行解析，渲染,我们就看到了页面。\n","created_time":1488990681,"id":4}]